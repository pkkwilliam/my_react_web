{"version":3,"sources":["common/appContext.js","context/appState/appStateContext.js","common/applicationComponent.js","common/h1.js","component/landingPage/landingPage.js","context/appState/appState.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","ApplicationComponent","_appContext","this","context","ENGLISH_LABEL","STYLE_SHEET","Component","contextType","AppStateContext","H1","styles","h1Styles","styleSheet","style","defaultStyle","props","children","color","primary","fontSize","fontWeight","LandingPage","console","log","appState","darkMode","Box","rootContainer","labels","landingPage","pageUnderConstruction","padding","AppState","state","Provider","value","App","addValue","removeValue","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8iBAAqBA,E,uGAEjB,OAAO,M,KCAIC,MAAMC,cAAc,ICIdC,E,2MAEnBC,YAAc,IAAIJ,E,0EAGhB,OAAOK,KAAKD,c,+BAIZ,OAAOC,KAAKC,U,6BAIZ,OAAOC,I,iCAIP,OAAOC,M,GAjBuCC,aAA7BN,EACZO,YAAcC,E,ICJFC,E,2MACnBC,OAASC,EAAS,EAAKC,Y,wEAGrB,OAAO,uBAAGC,MAAOX,KAAKQ,OAAOI,cAAeZ,KAAKa,MAAMC,c,GAJ3BhB,GAQ1BW,EAAW,SAACC,GAAD,MAAiB,CAChCE,aAAc,CACZG,MAAOL,EAAWK,MAAMC,QACxBC,SAAU,GACVC,WAAY,O,QCVKC,E,iLAGjB,OADAC,QAAQC,IAAIrB,KAAKsB,SAASC,UAExB,kBAACC,EAAA,EAAD,CAAKb,MAAOH,EAAOiB,eACjB,kBAAC,EAAD,KAAKzB,KAAK0B,OAAOC,YAAYC,4B,GALI9B,GAWnCU,EAAS,CACbiB,cAAe,CACbI,QAAS,KCfQC,G,iNACnBC,MAAQ,CACNR,UAAU,G,wEAIV,OACE,6BACE,kBAAC,EAAgBS,SAAjB,CACEC,MAAO,CACLV,SAAUvB,KAAK+B,MAAMR,WAGtBvB,KAAKa,MAAMC,e,GAbgBV,cCEjB8B,E,2MACnBH,MAAQ,G,wEAGN,OACE,kBAAC,EAAD,CACEE,MAAO,CACLA,MAAOjC,KAAK+B,MACZI,SAAUnC,KAAKmC,SACfC,YAAapC,KAAKoC,cAGpB,kBAAC,EAAD,W,GAZyBhC,aCObiC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d74905ff.chunk.js","sourcesContent":["export default class AppContext {\n  get readyToDisplay() {\n    return false;\n  }\n}\n","import React from \"react\";\n\nexport default React.createContext({});\n","import { Component } from \"react\";\nimport ENGLISH_LABEL from \"../resources/label_en.json\";\nimport STYLE_SHEET from \"./styleSheet.json\";\nimport AppContext from \"./appContext\";\nimport AppStateContext from \"../context/appState/appStateContext\";\n\nexport default class ApplicationComponent extends Component {\n  static contextType = AppStateContext;\n  _appContext = new AppContext();\n\n  get appContext() {\n    return this._appContext;\n  }\n\n  get appState() {\n    return this.context;\n  }\n\n  get labels() {\n    return ENGLISH_LABEL;\n  }\n\n  get styleSheet() {\n    return STYLE_SHEET;\n  }\n}\n","import React from \"react\";\nimport ApplicationComponent from \"./applicationComponent\";\n\nexport default class H1 extends ApplicationComponent {\n  styles = h1Styles(this.styleSheet);\n\n  render() {\n    return <p style={this.styles.defaultStyle}>{this.props.children}</p>;\n  }\n}\n\nconst h1Styles = (styleSheet) => ({\n  defaultStyle: {\n    color: styleSheet.color.primary,\n    fontSize: 16,\n    fontWeight: 600,\n  },\n});\n","import React from \"react\";\nimport H1 from \"../../common/h1\";\nimport Box from \"@material-ui/core/Box\";\nimport ApplicationComponent from \"../../common/applicationComponent\";\n\nexport default class LandingPage extends ApplicationComponent {\n  render() {\n    console.log(this.appState.darkMode);\n    return (\n      <Box style={styles.rootContainer}>\n        <H1>{this.labels.landingPage.pageUnderConstruction}</H1>\n      </Box>\n    );\n  }\n}\n\nconst styles = {\n  rootContainer: {\n    padding: 15,\n  },\n};\n","import React, { Component } from \"react\";\nimport AppStateContext from \"./appStateContext\";\n\nexport default class AppState extends Component {\n  state = {\n    darkMode: false,\n  };\n\n  render() {\n    return (\n      <div>\n        <AppStateContext.Provider\n          value={{\n            darkMode: this.state.darkMode,\n          }}\n        >\n          {this.props.children}\n        </AppStateContext.Provider>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport LandingPage from \"./component/landingPage/landingPage\";\nimport \"./App.css\";\nimport AppState from \"./context/appState/appState\";\n\nexport default class App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <AppState\n        value={{\n          value: this.state,\n          addValue: this.addValue,\n          removeValue: this.removeValue,\n        }}\n      >\n        <LandingPage />\n      </AppState>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}