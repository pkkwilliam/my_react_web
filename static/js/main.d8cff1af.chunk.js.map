{"version":3,"sources":["common/appContext.js","context/appState/appStateContext.js","common/applicationComponent.js","common/view.js","common/styles.js","common/h1.js","component/mainContent.js","component/landingPage.js","context/appState/appState.js","App.js","serviceWorker.js","index.js"],"names":["AppContext","React","createContext","ApplicationComponent","_appContext","this","context","ENGLISH_LABEL","Component","contextType","AppStateContext","View","Box","style","styles","defaultStyle","props","children","display","ORANGE_GRADIENT","styleSchema","color","black","blueTransparent","green","greenMedium","greyDark","greyLight","greyTransparent","orange","orangeGradient","orangeTransparent","primary","primaryGradient","primaryTransparent","red","redDark","secondary","secondaryTransparent","systemError","systemInform","systemSuccess","systemWarn","white","H1","getColor","colorInput","fontSize","fontWeight","margin","padding","MainContent","roortContainer","name","labels","landingPage","pageUnderConstruction","backgroundColor","borderRadius","flexDirection","width","LandingPage","rootContainer","height","AppState","state","darkMode","Provider","value","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"seAAqBA,E,uGAEjB,OAAO,M,KCAIC,MAAMC,cAAc,ICGdC,E,2MAEnBC,YAAc,IAAIJ,E,0EAGhB,OAAOK,KAAKD,c,+BAIZ,OAAOC,KAAKC,U,6BAIZ,OAAOC,M,GAbuCC,aAA7BL,EACZM,YAAcC,E,0kBCHFC,E,iLAEjB,OACE,kBAACC,EAAA,EAAD,CAAKC,MAAK,KAAOC,EAAOC,aAAd,GAA+BV,KAAKW,MAAMH,QACjDR,KAAKW,MAAMC,c,GAJcT,aAU5BM,EAAS,CACbC,aAAc,CACZG,QAAS,SCNPC,EAAkB,mDAqCTC,EA3BK,CAClBC,MAAO,CACLC,MArBU,QAsBVC,gBApBqB,qBAqBrBC,MAjBU,UAkBVC,YAjBiB,UAkBjBC,SAtBc,UAuBdC,UAtBe,UAuBfC,gBAtBqB,uBAuBrBC,OApBW,UAqBXC,eAAgBX,EAChBY,kBApBuB,yBAqBvBC,QA9BS,UA+BTC,gBAAiBd,EACjBe,mBAvBuB,yBAwBvBC,IAvBQ,SAwBRC,QAvBa,UAwBbC,UAjCc,UAkCdC,qBAhCqB,uBAiCrBC,YAxBiB,UAyBjBC,aAxBkB,UAyBlBC,cAxBmB,UAyBnBC,WAxBgB,UAyBhBC,MA7BU,Y,ujBCTOC,E,iLAEjB,IAAMvB,EAAQ,CACZA,MAAOhB,KAAKwC,SAASxC,KAAKW,MAAMK,QAElC,OACE,uBAAGR,MAAK,KAAOC,EAAOC,aAAd,CAA4BM,WAAUhB,KAAKW,MAAMC,Y,+BAIpD6B,GACP,OAAQA,GACN,IAAK,QACH,OAAO1B,EAAYC,MAAMsB,MAC3B,IAAK,QACH,OAAOvB,EAAYC,MAAMC,MAC3B,IAAK,OACH,OAAOF,EAAYC,MAAMK,SAC3B,QACE,OAAON,EAAYC,MAAMW,a,GAnBD7B,GAwB1BW,EAAS,CACbC,aAAc,CACZgC,SAAU,GACVC,WAAY,IACZC,OAAQ,EACRC,QAAS,IC3BQC,E,iLAEjB,OACE,kBAAC,EAAD,CAAMtC,MAAOC,EAAOsC,gBAClB,kBAAC,EAAD,KACE,uBAAGvC,MAAOC,EAAOuC,MAAjB,eAEF,kBAAC,EAAD,CAAIhC,MAAM,QAAQhB,KAAKiD,OAAOC,YAAYC,4B,GAPTrD,GAanCW,EAAS,CACbuC,KAAM,CACJhC,MAAOD,EAAYC,MAAMsB,MACzBI,SAAU,GACVC,WAAY,IACZC,OAAQ,GAEVG,eAAgB,CACdK,gBAAiBrC,EAAYC,MAAMW,QACnC0B,aAAc,GACdC,cAAe,SACfT,QAAS,GACTU,MAAO,YC1BUC,E,iLAEjB,OACE,kBAAC,EAAD,CAAMhD,MAAOC,EAAOgD,eAClB,kBAAC,EAAD,W,GAJiC3D,GAUnCW,EAAS,CACbgD,cAAe,CACbC,OAAQ,UACRb,QAAS,GACTU,MAAO,YChBUI,G,iNACnBC,MAAQ,CACNC,UAAU,G,wEAIV,OACE,6BACE,kBAAC,EAAgBC,SAAjB,CACEC,MAAO,CACLF,SAAU7D,KAAK4D,MAAMC,WAGtB7D,KAAKW,MAAMC,e,GAbgBT,cCEjB6D,E,2MACnBJ,MAAQ,G,wEAGN,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,W,GANyBzD,aCOb8D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.d8cff1af.chunk.js","sourcesContent":["export default class AppContext {\n  get readyToDisplay() {\n    return false;\n  }\n}\n","import React from \"react\";\n\nexport default React.createContext({});\n","import { Component } from \"react\";\nimport ENGLISH_LABEL from \"../resources/label_en.json\";\nimport AppContext from \"./appContext\";\nimport AppStateContext from \"../context/appState/appStateContext\";\n\nexport default class ApplicationComponent extends Component {\n  static contextType = AppStateContext;\n  _appContext = new AppContext();\n\n  get appContext() {\n    return this._appContext;\n  }\n\n  get appState() {\n    return this.context;\n  }\n\n  get labels() {\n    return ENGLISH_LABEL;\n  }\n}\n","import React, { Component } from \"react\";\nimport Box from \"@material-ui/core/Box\";\n\nexport default class View extends Component {\n  render() {\n    return (\n      <Box style={{ ...styles.defaultStyle, ...this.props.style }}>\n        {this.props.children}\n      </Box>\n    );\n  }\n}\n\nconst styles = {\n  defaultStyle: {\n    display: \"flex\",\n  },\n};\n","const BLACK = \"black\"; // TODO replace this with HEX code\nconst BLUE = \"#51a0d5\";\nconst BLUE_TRANSPARENT = \"rgba(0,132,255,.1)\";\nconst GREY_DARK = \"#7D7D7D\";\nconst GREY_LIGHT = \"#f6f6f6\";\nconst GREY_TRANSPARENT = \"rgba(12, 12, 12, .1)\";\nconst GREEN = \"#5CC928\";\nconst GREEN_MDEIUM = \"#1EA362\";\nconst ORANGE = \"#FF4F00\";\nconst ORANGE_GRADIENT = \"linear-gradient(45deg, #FE6B8B 30%, #FF8E53 90%)\";\nconst ORANGE_TRANSPARENT = \"rgb(255, 168, 128, .1)\";\nconst RED = \"EA4335\";\nconst RED_DARK = \"#DA4B3C\";\nconst WHITE = \"#FFFFFF\";\nconst SYSTEM_ERROR = \"#F44436\";\nconst SYSTEM_INFORM = \"#2196F3\";\nconst SYSTEM_SUCCESS = \"#4CAF51\";\nconst SYSTEM_WARN = \"#FF9800\";\n\nconst styleSchema = {\n  color: {\n    black: BLACK,\n    blueTransparent: BLUE_TRANSPARENT,\n    green: GREEN,\n    greenMedium: GREEN_MDEIUM,\n    greyDark: GREY_DARK,\n    greyLight: GREY_LIGHT,\n    greyTransparent: GREY_TRANSPARENT,\n    orange: ORANGE,\n    orangeGradient: ORANGE_GRADIENT,\n    orangeTransparent: ORANGE_TRANSPARENT,\n    primary: BLUE,\n    primaryGradient: ORANGE_GRADIENT,\n    primaryTransparent: ORANGE_TRANSPARENT,\n    red: RED,\n    redDark: RED_DARK,\n    secondary: GREY_DARK,\n    secondaryTransparent: GREY_TRANSPARENT,\n    systemError: SYSTEM_ERROR,\n    systemInform: SYSTEM_INFORM,\n    systemSuccess: SYSTEM_SUCCESS,\n    systemWarn: SYSTEM_WARN,\n    white: WHITE,\n  },\n};\n\nexport default styleSchema;\n","import React from \"react\";\nimport ApplicationComponent from \"./applicationComponent\";\nimport styleSchema from \"./styles\";\n\nexport default class H1 extends ApplicationComponent {\n  render() {\n    const color = {\n      color: this.getColor(this.props.color),\n    };\n    return (\n      <p style={{ ...styles.defaultStyle, color }}>{this.props.children}</p>\n    );\n  }\n\n  getColor(colorInput) {\n    switch (colorInput) {\n      case \"white\":\n        return styleSchema.color.white;\n      case \"black\":\n        return styleSchema.color.black;\n      case \"grey\":\n        return styleSchema.color.greyDark;\n      default:\n        return styleSchema.color.primary;\n    }\n  }\n}\n\nconst styles = {\n  defaultStyle: {\n    fontSize: 16,\n    fontWeight: 600,\n    margin: 0,\n    padding: 0,\n  },\n};\n","import React from \"react\";\nimport ApplicationComponent from \"../common/applicationComponent\";\nimport View from \"../common/view\";\nimport H1 from \"../common/h1\";\nimport styleSchema from \"../common/styles\";\n\nexport default class MainContent extends ApplicationComponent {\n  render() {\n    return (\n      <View style={styles.roortContainer}>\n        <View>\n          <p style={styles.name}>Ka Kei Pun</p>\n        </View>\n        <H1 color=\"grey\">{this.labels.landingPage.pageUnderConstruction}</H1>\n      </View>\n    );\n  }\n}\n\nconst styles = {\n  name: {\n    color: styleSchema.color.white,\n    fontSize: 38,\n    fontWeight: 300,\n    margin: 0,\n  },\n  roortContainer: {\n    backgroundColor: styleSchema.color.primary,\n    borderRadius: 15,\n    flexDirection: \"column\",\n    padding: 15,\n    width: \"inherit\",\n  },\n};\n","import React from \"react\";\nimport ApplicationComponent from \"../common/applicationComponent\";\nimport MainContent from \"./mainContent\";\nimport View from \"../common/view\";\n\nexport default class LandingPage extends ApplicationComponent {\n  render() {\n    return (\n      <View style={styles.rootContainer}>\n        <MainContent />\n      </View>\n    );\n  }\n}\n\nconst styles = {\n  rootContainer: {\n    height: \"inherit\",\n    padding: 10,\n    width: \"inherit\",\n  },\n};\n","import React, { Component } from \"react\";\nimport AppStateContext from \"./appStateContext\";\n\nexport default class AppState extends Component {\n  state = {\n    darkMode: false,\n  };\n\n  render() {\n    return (\n      <div>\n        <AppStateContext.Provider\n          value={{\n            darkMode: this.state.darkMode,\n          }}\n        >\n          {this.props.children}\n        </AppStateContext.Provider>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport LandingPage from \"./component/landingPage\";\nimport \"./App.css\";\nimport AppState from \"./context/appState/appState\";\n\nexport default class App extends Component {\n  state = {};\n\n  render() {\n    return (\n      <AppState>\n        <LandingPage />\n      </AppState>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}